@import "node_modules/bootstrap/scss/bootstrap";
@use "sass:math";

/* $debug: true; */
$debug: false;

// https://stackoverflow.com/questions/6654958/make-body-have-100-of-the-browser-height/25829844#25829844
html {
  width: 100%;
  height: 100%;
  display: table;
}

body {
  width: 100%;
  height: 100%;
  display: table-cell;
}

.cantStopBoard {
  touch-action: manipulation;
}

footer {
  padding: 0.3rem;
  display: flex;
  justify-content: center;
}

#root,
.bgio-client {
  display: flex;
  height: 100% !important;
  width: 100%;
}

$bgcolor: #f7f6f2;
.backgroundWrap {
  // https://stackoverflow.com/a/31267758/1067132
  display: inline-block;
  position: relative;
  width: 100%;
  background-color: $bgcolor;
}

// Make sure the main content is on top of the background
.backgroundWrap > div {
  position: relative;
  z-index: 2;
}
.backgroundWrap > svg {
  z-index: 1;
}

body {
  font-family: Verdana, Arial, sans-serif;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

@include media-breakpoint-up(xl) {
  html {
    font-size: 23px;
  }
}
@include media-breakpoint-down(lg) {
  html {
    font-size: 20px;
  }
}
@include media-breakpoint-down(md) {
  html {
    font-size: 17px;
  }
}

@include media-breakpoint-down(sm) {
  html {
    font-size: 16px;
  }
}

button {
  margin: 2px;
}

nav li {
  margin: 0 0.2rem;
}

$colors: #d55e00, #0072b2, #009e73, #f0e442, #cc79a7, #a8f7ea; //, #7d5241;

@for $i from 1 through length($colors) {
  $color: nth($colors, $i);
  .color#{$i - 1} {
    color: $color;
  }

  .bgcolor#{$i - 1} {
    color: white;
    background-color: $color;
    border: 0.05rem solid transparent;
    border-color: $color;
  }

  button.bgcolor#{$i - 1},
  button.bgcolor#{$i - 1}:hover {
    color: white;
    background-color: $color;
    border: 1px solid transparent;
    border-color: $color;
  }

  .border#{$i - 1} {
    border-color: $color;
  }

  .dotColor#{$i - 1} {
    fill: white;
  }
}

/* third color - yellow - is special because too light. */
.bgcolor3,
.bgcolor5 {
  color: black;
  /* background-color: #f0e442; */
  border-color: black;
}

button.bgcolor3,
button.bgcolor3:hover,
button.bgcolor5,
button.bgcolor5:hover {
  color: black;
  /* background-color: #f0e442; */
  border-color: black;
}

.dotColor3,
.dotColor5 {
  fill: black;
  stroke-width: 0;
  stroke: black;
}

@mixin cellDim($cell-height, $cell-width) {
  min-height: $cell-height;
  max-height: $cell-height;
  min-width: $cell-width;
  max-width: $cell-width;
}

.pageContentWrap {
  display: flex;
  flex-direction: column;
  align-items: center;
  min-height: 100%;
  padding: 0rem 0.5rem 0.5rem 0.5rem;
}

@include media-breakpoint-up(md) {
  .pageContentWrap > div {
    width: 80%;
  }
}
@include media-breakpoint-up(lg) {
  .pageContentWrap > div {
    width: 70%;
  }
}
@include media-breakpoint-up(xl) {
  .pageContentWrap > div {
    width: 60%;
  }
}

.howToPlayWrap {
  position: absolute;
  right: 0;
  top: 0;
  right: 0.3rem;
  top: 0.3rem;
  display: flex;

  flex-direction: column;
  justify-content: center;
  align-items: center;

  border-radius: 999px;

  height: 1rem;
  width: 1rem;

  cursor: pointer;

  background-color: grey;
  color: white;

  font-size: 0.8rem;
  font-weight: bold;
}

.modal {
  display: block;
  pointer-events: none;
}

.pageContent {
  flex: 1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  min-height: 100%;
}

.homeTitle {
  font-weight: bold;
  text-align: center;
}

h1 {
  font-weight: bold;
  text-align: center;
}

.pageContent h2 {
  padding-top: 1.5rem;
}

.homeContent .diceContainer {
  width: auto;
}

.table {
  margin-bottom: 0;
}

.rightWrap {
  align-self: stretch;

  display: flex;
  flex-direction: column-reverse;
  justify-content: space-between;
}

.diceButtons {
  align-self: stretch;

  display: flex;
  align-items: center;
  justify-content: center;
}

.boardContent {
  display: flex;
  flex-direction: column;
  align-items: center;
}

.bandBegin,
.bandMiddle,
.bandEnd {
  flex: 1;
}

.mountainWrap {
  display: flex;
  justify-content: center;
}

.cantStopBoard {
  display: flex;
  flex-direction: column;
  height: 100% !important;
  width: 100%;
}

#background {
  pointer-events: none;
  position: absolute;
  top: 0;
  left: 0;
  height: 100%;
  width: 100%;
}

// The media query fixes an issue on ios where the button at the same place as the last
// clicked button is "hovered".
@media (hover: hover) {
  .btn:hover,
  .btn:focus {
    filter: brightness(1.2);
  }
}

// Active is fine though!
.btn:active {
  filter: brightness(1.2);
}

.lastChoiceOtherPlayer:disabled {
  background-color: #000000;
}

@mixin setDice($diceSize) {
  $unit: $diceSize / 40;

  .die {
    width: $diceSize;
    height: $diceSize;
    border-radius: $diceSize / 8 + 0.1rem;
    margin: $diceSize / 15;

    box-shadow: $unit $unit $unit black, 2 * $unit 2 * $unit 2 * $unit black,
      $unit $unit $unit / 2 black;
    border: $unit solid black;
  }

  .diceContainer {
    width: $diceSize * 2.5;
    height: $diceSize * 2.5;
    display: flex;
    align-items: center;
    justify-content: center;
    flex-direction: column;
  }
}

$diceSize: 3.4rem;
@include setDice($diceSize);

.diceRow {
  display: flex;
  align-items: center;
  justify-content: center;
}

.buttonsWrap,
.fakeButtons {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-direction: column;
}

.fakeButtonsWrap {
  display: flex;
  flex-direction: row;
}

.fakeButton {
  display: flex;
  flex-direction: column;
  width: 0 !important;
  padding-right: 0 !important;
  padding-left: 0 !important;
  color: transparent !important;
  border-color: transparent !important;
  background-color: transparent !important;
}

.fakeButtonInside {
  height: 0 !important;
  padding-top: 0 !important;
  padding-bottom: 0 !important;
  margin-top: 0 !important;
  margin-bottom: 0 !important;
  color: transparent !important;
  border-color: transparent !important;
  background-color: transparent !important;
}

.fakeButtonInsideWrap {
  height: 0;
  display: flex;
  flex-direction: row;
}

.btnAction {
  margin: 0.1rem;
  padding: 10px;
  padding-right: 20px;
  padding-left: 20px;
  font-size: 20px;
}

.dot {
  stroke-width: 0.1rem;
  stroke: black;
}

.possibilitiesWrap {
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.mountain {
  font-family: arial, sans-serif;
  padding: 0;
  table-layout: fixed;
}

.mountainCol {
  padding: 0 !important;
  text-align: center;
  /* border: 1px solid green !important; */
}

.diceBoard {
  text-align: center;
  display: flex;
  align-items: center;
  justify-content: center;
}

.scoreBoard {
  align-self: center;
}

.scoreBoard td {
  padding: 0;
  margin: 0;
  height: 100%;
}

.scoreBoard tr {
  height: 100%;
}

.scoreBoardPlayerName,
.scoreBoardNumVictories {
  border-radius: 0.3rem;
  padding-left: 0.2rem;
  padding-right: 0.2rem;
  font-size: 0.8rem;
  margin: 0.1rem;

  display: flex;
  align-items: center;
}
.scoreBoardPlayerName {
  width: 9rem;
  border: 0.2rem solid transparent;
}

.scoreBoardNumVictories {
  border-radius: 0.2rem;
  justify-content: flex-end;
  font-weight: bold;
  border: 0;
}

.scoreBoardPlayerNameCurrent {
  border: 0.2rem solid black;
  box-shadow: 0 0 0.14rem black;
}

.littleFlash {
  animation: littleFlash;
  animation-duration: 0.5s;
  animation-iteration-count: infinite;
  animation-direction: alternate;
  animation-timing-function: ease-in-out;
}

.flashVibrate {
  animation: flash, vibrate;
  animation-duration: 0.5s, 2.5s;
  animation-iteration-count: infinite;
  animation-direction: alternate, reverse;
  animation-timing-function: ease-in-out, linear;
}

@keyframes flash {
  from {
    filter: brightness(0.9);
  }
  to {
    filter: brightness(1.2);
  }
}

@keyframes littleFlash {
  from {
    filter: brightness(0.95);
  }
  to {
    filter: brightness(1.1);
  }
}

@keyframes vibrate {
  from {
    transform: rotate(0deg);
  }
  1% {
    transform: rotate(-2deg);
  }
  2% {
    transform: rotate(0);
  }
  3% {
    transform: rotate(3deg);
  }
  4% {
    transform: rotate(0);
  }
  6% {
    transform: rotate(-3deg);
  }
  8% {
    transform: rotate(0);
  }
  10% {
    transform: rotate(2deg);
  }
  12% {
    transform: rotate(0);
  }
  to {
    transform: rotate(0deg);
  }
}

.mountainCell {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.climber {
  box-shadow: 0px 0px 4px -1px black, 1px 2px 3px 0px black;
  z-index: 50;
  opacity: 1;
  border-width: 0px;
  border-radius: 999px;
}

.climberCurrent {
  background-color: black;
  box-shadow: 0px 0px 1px 1px black, 1px 3px 4px 0px black;
  border-style: solid;
}

.climberGroup {
  display: flex;
  align-items: center;
  justify-content: center;
  max-width: 10rem;
}

.climberPlaceholder {
  border-radius: 0.3rem;
  background-color: #555555;
  width: 0.3rem;
  height: 0.3rem;
}

.climberPlaceholderWrap,
.colNumbersWrap {
  display: flex;
  align-items: center;
  justify-content: center;
}

.climberPlaceholderParity0 {
  background-color: #555555;
}

.climberPlaceholderParity1 {
  background-color: #222222;
}

.colNumbers {
  border-radius: 0.4rem;
  font-size: 0.8rem;
}

.colParity0 {
  background-color: #555555;
  color: white;
}

.colParity1 {
  background-color: #222222;
  color: white;
}

.infoWrap {
  position: absolute;
  left: 0;
  top: 0;
  bottom: 0;
  right: 0;
  pointer-events: none;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
  z-index: 100;
}

.infoBackground {
  background-color: rgba(white, 0.95);
  border-radius: 1rem;
  box-shadow: 0px 2px 5px rgba(0, 0, 0, 0.4);
  padding: 1rem;
}

.info {
  font-size: 1.5rem;

  opacity: 2;
  pointer-events: auto;
  cursor: pointer;

  padding: 0.4rem;
  margin: 0;
  border-radius: 0;
  display: flex;
  align-items: center;
  justify-content: center;
}

// The yellow player is too close to white, we make it a bit darker
.infoPlayerName.color3 .itsYourTurn.color3,
.infoPlayerName.color5 .itsYourTurn.color5 {
  filter: brightness(0.9);
}

.probMsgWrap {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
}

.itsYourTurn {
  font-weight: bold;
}

.homeLink {
  position: absolute;
  left: 0.3rem;
  top: 0.3rem;
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.homeLink * {
  display: inline-block;
}

.logoRow {
  display: flex;
}

.logoWrap {
  position: absolute;
  top: 0;
  left: 0.1rem;
}

.logoWrap .die {
  height: 0.85rem;
  width: 0.85rem;
  border-radius: 0.12rem;
  box-shadow: 1px 1px 2px black;
  margin: 1px;
}

.diceBoardButtonWrap {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.emptyStar {
  color: $bgcolor;
  text-shadow: 0px 0px 1px black;
}

.gameSetupWrap {
  width: 100%;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-direction: column;
}

.gameSetupPlayersWrap {
  flex: 1;
  width: 90%;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
}

.startButton {
  align-self: center;
}

.gameSetupPlayer {
  width: 100%;
  max-width: 22rem;
  border-radius: 0.3rem;
  // No border not event for yellow
  border: 0px;

  padding: 0.2rem 0.5rem;
  margin: 0.2rem;
  box-shadow: 1px 1px 2px black;

  display: flex;
  justify-content: space-between;
  align-items: center;

  .gameButtonWrap {
    flex: 1;
    height: 100%;

    display: flex;
    justify-content: flex-end;
  }
  .playerNameInput,
  .playerName {
    padding: 0;
    padding-left: 0.5rem;
    margin-left: 0.3rem;
    margin-right: 0.7rem;
  }

  position: relative;

  .colorWrap {
    position: relative;
  }

  .colorPopupWrap {
    position: absolute;
    left: 0;
    right: 0;
    top: 0;
    display: flex;
  }
}

.editButton {
  align-self: flex-start;
}

.gameSetupColorButton {
  border: 1px solid red;
  min-width: 2rem;
  min-height: 2rem;
  max-width: 2rem;
  max-height: 2rem;
  border-radius: 0.3rem;
  border: 1px solid black !important;
  box-shadow: 0px 0px 3px black;
  z-index: 20;
  transition: none;
  text-align: center;
  display: flex;
  justify-content: center;
  align-items: flex-end;
  align-items: center;
  padding-bottom: 0.6rem;

  color: black !important;
  font-size: 0.6rem;
}

.gameSetupColorButton > div {
  transform: rotate(45deg);
}

.gameSetupColorButtonDisabled {
  box-shadow: none;
  border-color: transparent !important;
  color: transparent !important;
  border-color: transparent !important;
  background-color: transparent !important;
}

.gameSetupPlayerFree {
  background-color: white;
  border: 2px dotted grey;
  opacity: 0.5;
  color: grey;
  text-align: center;
  box-shadow: 0 0 0 white;
  justify-content: center;
}

.readyWrap {
  width: 3rem;
  display: flex;
  flex-direction: column;
  justify-content: space-between;
  align-items: center;
}

.readyText {
  font-size: 0.6rem;
  cursor: pointer;
  transition: none;
}

.readyCheckWrap {
  display: flex;
  justify-content: center;
  align-items: center;
}

.readyCheck {
  margin: 0.2rem;
  transform: scale(1.5);
  border: 2px solid green;
  border-radius: 1rem;
}

.readyCheck:checked {
  background-color: green;
  cursor: pointer;
}

.custom-control-input:checked ~ .custom-control-label::before {
  background-color: transparent !important;
  border-radius: 0.25rem;
  border: 2px solid black !important;
  box-shadow: 0px 0px 3px black !important;
  cursor: pointer;
}

.custom-switch {
  padding-left: 2.7rem;
}

.custom-switch .custom-control-label::before {
  background-color: theme-color("dark") !important;
  box-shadow: 0px 0px 3px black !important;
  border: 2px solid black !important;
  border-radius: 0.25rem;
  cursor: pointer;
}

.custom-switch .custom-control-label::after {
  border-radius: 0.25rem;
  border: 2px solid black !important;
  background-color: white !important;
  cursor: pointer;
}

.gameSetupInviteWrap {
  width: 100%;
  max-width: 100vw;
  padding: 0.4rem;
  margin: 0;

  display: flex;
  flex-direction: row;
}

.inviteLeft {
  flex: 1;
}

.inviteRight {
  display: flex;
  justify-content: center;
  align-items: center;
}

.inviteLinkWrap {
  display: flex;
  align-items: center;
  flex-wrap: wrap;
  max-width: calc(100vw - 64px - 1rem);
}

.inviteLink {
  overflow: hidden;
  text-overflow: ellipsis;
  margin-right: 0.4rem;
  margin-top: 0.2rem;
  margin-bottom: 0.2rem;
}

.qrcode {
  width: 64px !important;
  height: 64px !important;
}

.copyBtn {
  font-size: 0.6rem;
  font-weight: bold;
  padding: 0.1rem;
  margin: 0.2rem 0;
}

.playAgainWrap {
  display: flex;
  align-items: center;
  justify-content: center;
}

.matchId {
  font-family: courier new;
  font-size: 12pt;
}

.dieSplit0 {
  margin-left: 0;
  margin-right: 0;
}

.dieSplit1 {
  margin-top: 0;
  margin-bottom: 0;
}

.dieSplit20 {
  transform: translate(0.05rem, 0.05rem);
  margin: 0;
}

.dieSplit21 {
  transform: translate(0.3rem, -0.3rem);
  margin: 0;
}

.dieSplit22 {
  margin: 0;
  transform: translate(-0.3rem, 0.3rem);
}
.dieSplit23 {
  margin: 0;
  transform: translate(-0.05rem, -0.05rem);
}

.dieHighlight {
  filter: brightness(1.2);
}

.highlight {
  filter: brightness(1.2);
  box-shadow: 0px 0px 1px 1px black, 1px 3px 6px 1px black;
}

.downlight {
  opacity: 0.6;
  box-shadow: 0px 0px 1px 1px black, 1px 3px 4px 0px black;
}

.actionButtons {
  display: flex;
  flex-direction: column;
  justify-content: center;
}

.numVictoriesCol {
  min-width: 2.5rem;
  height: 100%;
  display: flex;
  align-items: center;
  justify-content: flex-end;
}

.numVictoriesCol div {
}

.megaWrap {
  flex: 1;
  display: flex;
  flex-direction: row;
}

// height /width for one cell
$mountainRatio: 0.75;
@mixin cellSize($height, $numCols: 11) {
  $width: $height / $mountainRatio;

  $neg-margin: $width * -0.3;
  $climberSize: $width * 0.4;
  $colNumWidth: $width * 0.85;
  $currentClimberSize: $climberSize;
  $currentClimberBorder: $width * 1/20;
  $mountainWidth: $width * $numCols;
  $blockedSize: $width * 0.35;

  .mountain {
    width: $mountainWidth;
  }

  .climberPlaceholderWrap,
  .colNumbersWrap,
  .climberGroup,
  .mountainCell {
    @include cellDim($height, $width);
  }
  .climberGroup {
    margin-top: -$height;
  }

  .climber {
    height: $climberSize;
    width: $climberSize;
    /* box-shadow: 0px 0px 4px -1px black, 1px 2px 3px 0px black; */
    margin-right: $neg-margin;
    margin-left: $neg-margin;
  }

  .climberCurrent {
    height: $currentClimberSize;
    width: $currentClimberSize;
    border-width: $currentClimberBorder !important;
  }

  .climberPlaceholderBlocked {
    border-radius: 999px;
    border: 0px solid transparent;
    width: $blockedSize !important;
    height: $blockedSize !important;
  }

  .colNumbers {
    width: $colNumWidth;
    font-size: $width / 3.5;
    border-radius: $width / 7;
    /* font-size: $width / 4; */
  }
}

.bigHspace {
  flex: 1;
}

.diceButtonsBefore,
.diceButtonsAfter {
  flex: 1;
}

.diceButtonsMiddle {
  flex: 0.5;
}

// Default is really tall not wide
// In that case we want the mountain to take the full width
$width: 96vw / 11;
$height: $width * $mountainRatio;
@include cellSize($height);

@if $debug {
  * {
    border: 1px solid red;
  }
}

// As we get closer to a square, we want to use some ratio of the height of the device
// as the side of our mountain square
@media (min-aspect-ratio: 3/5) {
  @include cellSize(0.5 * 100vh / 14);
  @if $debug {
    * {
      border: 1px solid orange;
    }
  }
}

@media (min-aspect-ratio: 1/1) {
  $width: 60vw / 11;
  $height: $width * $mountainRatio;
  @include cellSize($height);
  @if $debug {
    * {
      border: 1px solid gold;
    }
  }
}

@media (min-aspect-ratio: 1/1) {
  .rightWrap {
    flex-direction: column;
  }

  .megaWrap {
    flex-direction: column;
  }

  .bandMiddle {
    flex: 0.1;
  }

  .boardContent {
    flex-direction: row;
  }

  .diceButtons {
    flex-direction: column;
  }
  @if $debug {
    * {
      border: 1px solid orange;
    }
  }
}

@media (min-aspect-ratio: 4/3) {
  @include cellSize(80vh / 14);

  @if $debug {
    * {
      border: 1px solid green;
    }
  }
}

@media (min-aspect-ratio: 3/2) {
  @include cellSize(80vh / 14);

  .diceButtons {
    flex-direction: row;
  }
  .bandMiddle {
    flex: 0.2;
  }
  @if $debug {
    * {
      border: 1px solid blue;
    }
  }
}
@media (min-width: 800px) and (min-height: 800px) and (min-aspect-ratio: 3/2) {
  .diceButtons {
    flex-direction: column;
  }
  .bandMiddle {
    flex: 0;
  }
  @if $debug {
    * {
      border: 1px solid purple;
    }
  }
}

// Tweaks per bootstrap breakpoints.
// On a super big screen that is a nice "normal" rectangle, we don't make the mountain
// as big.

@media (min-width: 1200px) and (min-height: 900px) and (min-aspect-ratio: 1/1) and (max-aspect-ratio: 7/3) {
  @include cellSize(65vh / 14);
  @if $debug {
    * {
      border: 1px solid pink;
    }
  }
}

// We reuse a bunch of components in the Rules, but we need to adjust some of the
// parameters.
.rules {
  font-size: 1rem;
  p,
  li {
    text-align: justify;
  }

  @include setDice(1rem);

  .btnAction {
    font-size: 1rem;
    padding: 0 0.5rem;
  }

  @include cellSize(1.2rem, 3);
  .mountainWrap {
    @include cellSize(1.2rem, 3);
  }

  .fullMountain {
    @include cellSize(1rem, 11);
    display: flex;
    justify-content: center;
  }

  .climber {
    margin: 0rem 0.1rem;
    display: inline-block;
  }

  .ruleRow {
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .bust {
    padding: 0.12rem;
    font-size: 1rem;
  }

  .container-fluid {
    padding: 0;
  }

  .movesWrap {
    p {
      margin: 0;
    }

    display: flex;
    justify-content: center;
    align-items: center;

    margin-bottom: 1rem;
  }

  .movesBox {
    border: 2px solid black;
    border-radius: 1rem;
    background-color: rgba(white, 0.6);
    padding: 0.5rem;
    margin: 0.2rem;

    display: flex;
    justify-content: space-between;
    align-items: center;

    p {
      max-width: 16rem;
    }
  }

  .movesRight {
    padding-left: 0.8rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  hr {
    margin: 0.2rem;
    border: none;
    height: 1px;
    color: black;
    background-color: black;
  }
  .doubleDiceWrap {
    padding: 0;
    margin: 0;
  }

  .doubleDiceRow {
    display: flex;
    padding: 0;
    margin: 0;
  }
}
